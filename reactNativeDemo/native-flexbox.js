// native 中伸缩布局
// 用 flexbox 进行布局，由伸缩容器和伸缩项目组成
// 其中 display: flex 或者 display: inline-flex 的为伸缩容器
// 伸缩容器的子元素为伸缩项目
// 它的普通的盒子模型不同，有两根轴组成：主轴和交叉轴，定义不同的属性使伸缩项目变的有序
// 伸缩容器的属性：
//     display: 指定是否为伸缩容器，flex(伸缩容器) | flex-inline(行内伸缩容器)
//     flex-dirction: 指定主轴的方向，row(水平轴) | row-reverse(反向水平轴) | column(垂直轴) | column-reverse(反向垂直轴)
//     flex-wrap: 伸缩容器主轴空间不足的情况下，是否换行的如何换行
//     flex-flow: 上面两项的缩写版本，同时指定主轴的方向和如何换行
//     justify-content: 伸缩项目沿主轴线的对齐方式
//     align-items: 用来定义伸缩项目在伸缩容器交叉轴上的对齐方式
//     align-content: 伸缩项目出现换行后在交叉轴上的对齐方式，注意用这个属性时 flex-wrap: wrap 一定要开启
// 伸缩项目属性：
//     order: 用来定义伸缩项目的排列顺序，数值越小，排列越靠前，默认为 0，可以为负值
//     flex-grow: 在有剩余空间的情况下，定义伸缩项目的放大比例，默认情况下，为 0，即使有剩余空间也不放大，如果把每个项目的值都设为 1，即每个项目设置为大小相等的剩余空间。如果这时一个项目的值为 2，则它的剩余空间是其他的两倍
//     flex-shrink: 在空间不足的情况下，各个项目占的地方，比如说一个元素的值为 3，则在空间不足的情况下它的大小为其他的三分之一
//     flex-basis: 用来设置伸缩项目的基准值，剩余空间按照比例伸缩
//     flex: 前面三个参数的集合，一般设置 flex: 1，即 flex-grow: 1，如果有剩余空间，项目占有相同的比例。
//     align-self: 单独设置伸缩项目在交叉轴上的对齐方式。

// 其中，React Native 主要用其中的 6 个属性，需要用驼峰式写法：
// alignItems: 项目沿交叉轴的对齐方式
// alignSelf: 单独设置伸缩项目在交叉轴上的对齐方式
// flex: 容器有无空余位置时元素的大小处理方式，和伸缩项目的基准值
// flexDirection: 指定主轴的方向，水平垂直 or 反向
// flexWrap: 在一行满了的时候是否换行
// justifyContent: 元素沿着主轴的对齐方式

// 总结就是：指定主轴，沿主轴，交叉轴的对齐方式，是否换行，有无空间时的伸缩基准值，单独设置一个元素沿交叉轴的对齐方式